from dotenv import load_dotenv
load_dotenv()

from flask import Flask, request, jsonify
import requests
import os

app = Flask(__name__)

user_states = {}  # user_id -> current step
user_data = {}    # user_id -> {name, surname, tournament}

ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
PHONE_NUMBER_ID = "733866206470935"

def convert_to_wa_id(phone):
    if phone.startswith("770"):
        return "78" + phone[1:]
    return phone


def send_message(to_number, message_text):
    to_number = to_number.replace("+", "").replace(" ", "")
    to_number = convert_to_wa_id(to_number)

    print(f"üìû –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä: {to_number}")  # üëâ –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥

    url = f"https://graph.facebook.com/v19.0/{PHONE_NUMBER_ID}/messages"
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": to_number,
        "type": "text",
        "text": {
            "body": message_text
        }
    }

    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}, {response.text}")
    else:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")


@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()

    if data and "entry" in data:
        for entry in data["entry"]:
            for change in entry.get("changes", []):
                value = change.get("value", {})
                messages = value.get("messages", [])
                if messages:
                    message = messages[0]
                    text = message["text"]["body"].strip()
                    sender = message["from"]

                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {text}")

                    state = user_states.get(sender, 'start')

                    if state == 'start':
                        send_message(sender, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è.")
                        user_states[sender] = 'wait_name'

                    elif state == 'wait_name':
                        user_data[sender] = {'name': text}
                        send_message(sender, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é.")
                        user_states[sender] = 'wait_surname'

                    elif state == 'wait_surname':
                        user_data[sender]['surname'] = text
                        send_message(sender, "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ —Ç—É—Ä–Ω–∏—Ä:\n1. –õ–µ—Ç–Ω–∏–π\n2. –û—Å–µ–Ω–Ω–∏–π\n3. –ó–∏–º–Ω–∏–π")
                        user_states[sender] = 'wait_tournament'

                    elif state == 'wait_tournament':
                        user_data[sender]['tournament'] = text
                        name = user_data[sender]['name']
                        surname = user_data[sender]['surname']
                        tournament = user_data[sender]['tournament']
                        send_message(sender, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä '{tournament}'? (–¥–∞/–Ω–µ—Ç)")
                        user_states[sender] = 'confirm'

                    elif state == 'confirm':
                        if text.lower() == '–¥–∞':
                            send_message(sender, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ!")
                            print(f"üì¶ –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {user_data[sender]}")
                        else:
                            send_message(sender, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                        user_states.pop(sender, None)
                        user_data.pop(sender, None)

    return "OK", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5001))
    app.run(host="0.0.0.0", port=port)
