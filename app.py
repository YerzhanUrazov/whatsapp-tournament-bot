import os
from flask import Flask, send_file
import logging
import csv
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if os.environ.get("FLASK_ENV") != "production":
    load_dotenv()

logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

user_data_confirmed = {}  # ‚úÖ —Å—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
CONFIRMED_USERS_FILE = "confirmed_users.csv"

# üîΩ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google-credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–¢—É—Ä–Ω–∏—Ä –∑–∞—è–≤–∫–∏").sheet1
config_sheet = client.open("–¢—É—Ä–Ω–∏—Ä –∑–∞—è–≤–∫–∏").worksheet("config")

def get_current_tournament():
    try:
        return config_sheet.acell("B1").value.strip()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Sheets: {e}")
        return ""

def get_tournament_description():
    try:
        return config_sheet.acell("B2").value.strip()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Sheets: {e}")
        return ""

def save_confirmed_user_to_file(user_id, data):
    is_new_file = not os.path.exists(CONFIRMED_USERS_FILE)
    timestamp = datetime.utcnow() + timedelta(hours=5)
    date_str = timestamp.strftime("%Y-%m-%d")
    time_str = timestamp.strftime("%H:%M:%S")

    with open(CONFIRMED_USERS_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if is_new_file:
            writer.writerow(["–ù–æ–º–µ—Ä", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢—É—Ä–Ω–∏—Ä", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"])
        writer.writerow([
            data.get("phone", ""),
            data.get("name", ""),
            data.get("surname", ""),
            get_current_tournament(),
            date_str,
            time_str
        ])

    try:
        sheet.append_row([
            data.get("phone", ""),
            data.get("name", ""),
            data.get("surname", ""),
            get_current_tournament(),
            date_str,
            time_str
        ])
        logging.info("üìÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

# Telegram bot logic
WAIT_PHONE, WAIT_NAME, WAIT_SURNAME, CONFIRM = range(4)

def start(update: Update, context: CallbackContext):
    button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[button]], one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=reply_markup
    )
    return WAIT_PHONE

def receive_phone(update: Update, context: CallbackContext):
    contact = update.message.contact
    if contact and contact.phone_number:
        phone = contact.phone_number
        context.user_data["phone"] = phone
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        return WAIT_NAME
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä.")
        return WAIT_PHONE

def wait_name(update: Update, context: CallbackContext):
    context.user_data["name"] = update.message.text
    update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")
    return WAIT_SURNAME

def wait_surname(update: Update, context: CallbackContext):
    context.user_data["surname"] = update.message.text
    tournament = get_current_tournament()
    update.message.reply_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä '{tournament}'? –û—Ç–≤–µ—Ç—å—Ç–µ 1 ‚Äî –î–∞, 2 ‚Äî –ù–µ—Ç.")
    return CONFIRM

def confirm(update: Update, context: CallbackContext):
    if update.message.text.strip() == '1':
        save_confirmed_user_to_file(update.effective_user.id, context.user_data)
        update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ!")
    else:
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

@app.route("/export", methods=["GET"])
def export_users():
    if not os.path.exists(CONFIRMED_USERS_FILE):
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏", 200

    return send_file(
        CONFIRMED_USERS_FILE,
        mimetype="text/csv",
        as_attachment=True,
        download_name="users.csv"
    )

@app.route("/ping")
def ping():
    return "", 204

def main():
    TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAIT_PHONE: [MessageHandler(Filters.contact, receive_phone)],
            WAIT_NAME: [MessageHandler(Filters.text & ~Filters.command, wait_name)],
            WAIT_SURNAME: [MessageHandler(Filters.text & ~Filters.command, wait_surname)],
            CONFIRM: [MessageHandler(Filters.text & ~Filters.command, confirm)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
